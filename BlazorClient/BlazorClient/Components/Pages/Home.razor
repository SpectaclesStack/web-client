@page "/"
@using System.Text.Json
@rendermode InteractiveServer

<PageTitle >Spectacles Stack</PageTitle>

<div class="main-container">
    <div class="question-text">
        <p>Search Questions</p>
    </div>
    <div class="home-content">
        <div class="search-container">
            <input @bind="inputValue" />
            <button @onclick="SearchValue">Search</button>
        </div>
        <div class="search-base"></div>
        <div class="question-answer">
            <div class="question-box">
                <div class="icon-box">
                    icon
                </div>
                <div class="title-box">
                    <div>
                        title
                    </div>
                    <div>
                        description
                    </div>
                </div>
            </div>
            <div class="answer-box">
                <div class="icon-box">
                    icon
                </div>
                <div class="title-box">
                    <div>
                        title
                    </div>
                    <div>
                        description
                    </div>
                </div>
            </div>
        </div>

            <div class="other-services">
                Search Result: @SearchResult
            </div>
        
    </div>
</div>

<style>
    .main-container {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        background: #0C1D4F;
    }

    .question-text {
        color: #fff;
    }

    .home-content {
        background: #fff;
        border-radius: 5px;
        padding: 5px;
    }

    .search-container {
        display: flex;
        align-items: center;
    }

    .search-container input {
        margin-right: 10px;
    }

    .question-answer {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .other-services {
        margin-top: 10px;
        background-color: #f0f0f0;
        padding: 10px;
    }
</style>

@code {
    private string inputValue = "Type a question";
    private string? SearchResult { get; set; }

    private string? result {get; set;}

    private async Task<string> getQuestions(){
        string apiUrl = $"http://3.250.62.135:5033/api/Users";

        //string result = "Empty";

        using (HttpClient client = new HttpClient())
        {

            HttpResponseMessage response = await client.GetAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                string responseBody = await response.Content.ReadAsStringAsync();
                var jsonDocument = JsonDocument.Parse(responseBody);
                var data = jsonDocument.RootElement;
                //string login = data.GetProperty("login").GetString() ?? "";
                result = responseBody;
            }
            
        }  

        if(result == null){
            return "NOT_FOUND";
        }else{
            return result;
        }

    }

private async void SearchValue()
{
    // Perform search operation based on the inputValue
    // For demonstration, let's just output the search result to the console
    Console.WriteLine($"Performing search for: {inputValue}");
    await getQuestions();
    // Here you would typically perform your search logic
    // and assign the result to SearchResult
    SearchResult = "Search result for: " + result;


    

    // Notify Blazor that the state has changed so it updates the UI
    StateHasChanged();
}


}
