@page "/"
@using System.Text.Json
@using System.Text.Json.Serialization
@rendermode InteractiveServer

<PageTitle>Spectacles Stack</PageTitle>

<div class="main-container">
    <div class="question-text">    
        <p>Search Questions</p>
    </div>
    <div class="home-content">
        <div class="search-container">
            <input @bind="inputValue" />
            <button @onclick="SearchValue">Search</button>
        </div>
        <div class="search-base"></div>
        <div class="question-answer">
            @if (questions != null)
            {
                foreach (var question in questions)
                {
                    <div class="question-box">
                        <div class="title-box">
                            <div class="title">@question.Title</div>
                            <div class="date">@question.CreateAt.ToShortDateString()</div>
                        </div>
                        <div class="description-box">
                            <div class="body">@question.Body</div>
                        </div>
                        <a href=$"http://localhost:5069/question?question_id={@question.QuestionId}" target="_self">View More</a>
                    </div>
                }
            }
        </div>

    </div>
</div>

<style>
    .main-container {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        background: #0C1D4F;
    }

    .question-text {
        color: #fff;
    }

    .home-content {
        background: #fff;
        border-radius: 5px;
        padding: 5px;
    }

    .search-container {
        display: flex;
        align-items: center;
    }

        .search-container input {
            margin-right: 10px;
        }

    .question-answer {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: space-between;
    }

    .question-box {
        background-color: #f9f9f9;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        width: calc(50% - 20px); 
    }

    .title-box {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .title {
        font-weight: bold;
        font-size: 18px;
    }

    .date {
        color: #666;
        font-size: 14px;
    }

    .description-box {
        font-size: 16px;
        color: #333;
    }

    .other-services {
        margin-top: 10px;
        background-color: #f0f0f0;
        padding: 10px;
    }


</style>

@code {
    private string inputValue = "Type a question";
    private string? SearchResult { get; set; }

    private string? result;

    private List<Question>? questions;

    private class Question
    {
        [JsonPropertyName("questionId")]
        public int QuestionId { get; set; }

        [JsonPropertyName("title")]
        public string? Title { get; set; }

        [JsonPropertyName("body")]
        public string? Body { get; set; }

        [JsonPropertyName("createAt")]
        public DateTime CreateAt { get; set; }

        [JsonPropertyName("userid")]
        public int Userid { get; set; }
    }

    private async Task<string> GetQuestions()
    {
        string apiUrl = "http://3.250.62.135:5033/api/Questions";

        using (HttpClient client = new HttpClient())
        {
            HttpResponseMessage response = await client.GetAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                string responseBody = await response.Content.ReadAsStringAsync();
                questions = JsonSerializer.Deserialize<List<Question>>(responseBody);

                var filteredQuestions = new List<Question>();
                if(questions != null && !string.IsNullOrEmpty(inputValue))
                {
                    foreach (var question in questions)
                    {
                        // Filter by title or body content
                        if (question.Title.Contains(inputValue, StringComparison.OrdinalIgnoreCase) ||
                            question.Body.Contains(inputValue, StringComparison.OrdinalIgnoreCase) ) 
                        {
                            filteredQuestions.Add(question);
                        }
                    }
                    questions = filteredQuestions;
                }

       
                result = responseBody;
            }
        }

        return result ?? "NOT_FOUND";
    }

    private async void SearchValue()
    {
        Console.WriteLine($"Performing search for: {inputValue}");
        
        var ques = await GetQuestions();
        StateHasChanged();
    }
}
