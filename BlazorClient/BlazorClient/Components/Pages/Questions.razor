@page "/questions"
@rendermode InteractiveServer
@attribute [StreamRendering]
@using System.Text.Json;
@using System.Text
@using BlazorClient.Model;
@inject NavigationManager NavManager
@using System.Net.Http;
@using BlazorClient.Services
@inject IIdService IdService

<PageTitle>Ask a Question</PageTitle>

<h1 class="question-header">Ask a question</h1>

<div class="post-question-container">
    <div class="title-container">
        <label class="question-title">Title: </label>
        <input @bind="questionTitle"/>
    </div>
    <div class="body-container">
        <label class="question-body">Body: </label>
        <input @bind="questionBody"/>
    </div>
    <button @onclick="postQuestion">Ask Question</button>
</div>

<style>
    .question-header {
        color: #fff;
        text-align: center;
    }

    .question-title {
        color: #fff;
    }

    .question-body {
        color: #fff;
    }

    .form-group {
        margin-bottom: 20px; /* Adjust as needed */
    }

    .post-question-container {
        max-width: 600px;
        margin-top: 2rem;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 8px;
    }

    .title-container,
    .body-container {
        margin-bottom: 20px;
    }

    input {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    button {
        display: block;
        width: 50%;
        padding: 10px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    button:hover {
        background-color: #0056b3;
    }

</style>

@code {
    Question question = new Question();
    private string? questionTitle = "";
    private string? questionBody = "";

    public class Question
    {
        public int QuestionId { get; set; }
        public int userid { get; set; }
        //[Required]
        public string? Title { get; set; }
        //[Required]
        public string? Body { get; set; }
        public DateTime? CreateAt { get; set; }
    }

    string ? LastSubmitResult;

    private void postQuestion()
    {
        if(!string.IsNullOrEmpty(IdService.GetId())){
        HttpClient client = new HttpClient();
        question.userid = Convert.ToInt32(IdService.GetId());
        question.CreateAt = DateTime.Now;
        question.Title = questionTitle;
        question.Body = questionBody;
        string jsonQuestion = JsonSerializer.Serialize(question);
        
        string acc = IdService.GetAccessToken();

        client.DefaultRequestHeaders.Add("User-Agent", "C# HttpClient");
        client.DefaultRequestHeaders.Add("Authorization", "Bearer " + acc);  

        var request = client.PostAsync("http://3.250.62.135:5033/api/Questions", new StringContent(jsonQuestion, Encoding.UTF8, "application/json"));
        if (request.Result.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("/");
        }
        NavManager.NavigateTo("/");
        }else{
           NavManager.NavigateTo("/login"); 
        }

    }
}

