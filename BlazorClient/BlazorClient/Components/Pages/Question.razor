@page "/question"
@using System.Text.Json
@using System.Text.Json.Serialization
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<PageTitle>Spectacles Stack</PageTitle>

<div class="main-container">
    <div class="home-content">
        
        <h3>Question</h3>
        <div class="question-answer">
            @if (question != null)
            {
                <div class="question-box">
                    <div class="title-box">
                        <div class="title">@question.Title</div>
                        <div class="date">Date Posted: @question.CreateAt.ToShortDateString()</div>
                    </div>
                    <div class="description-box">
                        <div class="body">@question.Body</div>
                    </div>
                </div>
            }
        </div>
        <h3>Answers to above question</h3>
        <div class="question-answers">
            @if (answers != null)
            {
                foreach (var answer in answers)
                {
                    <div class="question-box">
                        <div class="title-box">
                            <div class="date">Date Posted: @answer.CreateAt.ToShortDateString()</div>
                        </div>
                        <div class="description-box">
                            <div class="body">@answer.answer</div>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="linedivision"></div>
        <a class="answerpagelink" href="@answerpage" target="_self">Add Answer</a>
    </div>
    
</div>

<style>
    .main-container {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        background: #0C1D4F;
    }

    .question-text {
        margin: 1rem;
    }

    .question-text p {
        color: #fff;
    }

    .home-content {
        background: #fff;
        border-radius: 5px;
        padding: 5px;
        flex: 1;
    }

    .search-container {
        display: flex;
        align-items: center;
    }

    .search-container input {
        margin-right: 10px;
    }

    .question-answer {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: space-between;
    }

    .linedivision {
        height:0.2rem;
        width:100%;
        margin: 0.1rem;
        padding: 0.2rem;
    }

    .question-box {
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        width: 100%;
        background: lightslategrey;
        color: #fff;
    }

    .title-box {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .title {
        font-weight: bold;
        font-size: 18px;
    }

    .date {
        font-size: 14px;
        color: #fff;
    }

    .description-box {
        font-size: 16px;
        color: #333;
    }

    .other-services {
        margin-top: 10px;
        background-color: #f0f0f0;
        padding: 10px;
    }

    .answerpagelink {
        padding: 0.3rem;
        background: #0C1D4F;
        border-radius: 10px;
        text-decoration: none;
        color: #fff;
    }

    .answerpagelink a {
        text-decoration: none;
        color: #fff;
    }

</style>

@code {
    private string inputValue = "Type a question";
    private string? SearchResult { get; set; }
    private string? answerpage;

    private string? result;

    private Quest? question;

    private string? question_id;

    private List<Answers>? answers;

    private class Quest
    {
        [JsonPropertyName("questionId")]
        public int QuestionId { get; set; }

        [JsonPropertyName("title")]
        public string? Title { get; set; }

        [JsonPropertyName("body")]
        public string? Body { get; set; }

        [JsonPropertyName("createAt")]
        public DateTime CreateAt { get; set; }

        [JsonPropertyName("userid")]
        public int Userid { get; set; }
    }

    private class Answers
    {
        [JsonPropertyName("answerid")]
        public int AnswerId { get; set; }

        [JsonPropertyName("questionid")]
        public required int questionid { get; set; }

        [JsonPropertyName("userid")]
        public required int userid { get; set; }

        [JsonPropertyName("createAt")]
        public required DateTime CreateAt { get; set; }

        [JsonPropertyName("answer")]
        public required string answer { get; set; }
    }


    private async Task<string> GetQuestion()
    {

        var uri = new Uri(NavigationManager.Uri);
        var queryParam = uri.Query;
        if (!string.IsNullOrEmpty(queryParam))
        {
            var queryParams = System.Web.HttpUtility.ParseQueryString(queryParam);
            question_id = queryParams["question_id"];
            answerpage = $"answer?question_id={question_id}";
        }

        string apiUrl = $"http://3.250.62.135:5033/api/Questions/{Convert.ToInt32(question_id)}";

        using (HttpClient client = new HttpClient())
        {
            HttpResponseMessage response = await client.GetAsync(apiUrl);
            if (response.IsSuccessStatusCode)
            {
                string responseBody = await response.Content.ReadAsStringAsync();
                question = JsonSerializer.Deserialize<Quest>(responseBody);

                HttpResponseMessage getanswersresponse = await client.GetAsync("http://3.250.62.135:5033/api/Answers");
                if (getanswersresponse.IsSuccessStatusCode)
                {
                    string answersresBody = await getanswersresponse.Content.ReadAsStringAsync();
                    answers = JsonSerializer.Deserialize<List<Answers>>(answersresBody);

                    var filteredAnswers = new List<Answers>();
                    if (answers != null && !string.IsNullOrEmpty(question_id))
                    {
                        foreach (var answer in answers)
                        {
                            if (answer.questionid == Convert.ToInt32(question_id))
                            {
                                filteredAnswers.Add(answer);
                            }
                        }
                        answers = filteredAnswers;
                    }

                }
                result = responseBody;
            }
        }

        return result ?? "NOT_FOUND";
    }

    protected override async Task OnInitializedAsync()
    {
        var requestquestion = await GetQuestion();
    }

}
